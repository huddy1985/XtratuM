diff -NaurbB linux-2.6.17.4/arch/i386/kernel/cpu/common.c linux-2.6.17.4-xm/arch/i386/kernel/cpu/common.c
--- linux-2.6.17.4/arch/i386/kernel/cpu/common.c	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/arch/i386/kernel/cpu/common.c	2006-07-27 21:49:42.000000000 +0200
@@ -419,6 +419,10 @@
 		clear_bit(X86_FEATURE_XMM, c->x86_capability);
 	}
 
+#ifdef CONFIG_XTRATUM
+	disable_x86_sep = 1;
+#endif
+
 	/* SEP disabled? */
 	if (disable_x86_sep)
 		clear_bit(X86_FEATURE_SEP, c->x86_capability);
diff -NaurbB linux-2.6.17.4/arch/i386/kernel/entry.S linux-2.6.17.4-xm/arch/i386/kernel/entry.S
--- linux-2.6.17.4/arch/i386/kernel/entry.S	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/arch/i386/kernel/entry.S	2006-07-27 21:49:42.000000000 +0200
@@ -75,8 +75,29 @@
 NT_MASK		= 0x00004000
 VM_MASK		= 0x00020000
 
+#ifdef CONFIG_XTRATUM
+	
+#define CLI call *(XM_root_func+0)
+#define STI call *(XM_root_func+4)
+#define HW_STI sti
+#define EMULATE_IRET \
+	movl (XM_root_func+32),%eax; \
+	testl %eax, %eax	; \
+	je 1f			; \
+	call *%eax		; \
+	1:
+	
+#else
+	
+#define CLI cli
+#define STI sti
+#define HW_STI
+#define EMULATE_IRET
+	
+#endif
+	
 #ifdef CONFIG_PREEMPT
-#define preempt_stop		cli
+#define preempt_stop		CLI
 #else
 #define preempt_stop
 #define resume_kernel		restore_nocheck
@@ -124,6 +145,7 @@
 
 
 ENTRY(ret_from_fork)
+	HW_STI
 	pushl %eax
 	call schedule_tail
 	GET_THREAD_INFO(%ebp)
@@ -141,14 +163,14 @@
 	ALIGN
 ret_from_exception:
 	preempt_stop
-ret_from_intr:
+ENTRY(ret_from_intr)
 	GET_THREAD_INFO(%ebp)
 	movl EFLAGS(%esp), %eax		# mix EFLAGS and CS
 	movb CS(%esp), %al
 	testl $(VM_MASK | 3), %eax
 	jz resume_kernel
 ENTRY(resume_userspace)
- 	cli				# make sure we don't miss an interrupt
+ 	CLI				# make sure we don't miss an interrupt
 					# setting need_resched or sigpending
 					# between sampling and the iret
 	movl TI_flags(%ebp), %ecx
@@ -209,7 +231,7 @@
 	jae syscall_badsys
 	call *sys_call_table(,%eax,4)
 	movl %eax,EAX(%esp)
-	cli
+	CLI
 	movl TI_flags(%ebp), %ecx
 	testw $_TIF_ALLWORK_MASK, %cx
 	jne syscall_exit_work
@@ -240,7 +262,7 @@
 	call *sys_call_table(,%eax,4)
 	movl %eax,EAX(%esp)		# store the return value
 syscall_exit:
-	cli				# make sure we don't miss an interrupt
+	CLI				# make sure we don't miss an interrupt
 					# setting need_resched or sigpending
 					# between sampling and the iret
 	movl TI_flags(%ebp), %ecx
@@ -258,6 +280,7 @@
 	cmpl $((4 << 8) | 3), %eax
 	je ldt_ss			# returning to user-space with LDT SS
 restore_nocheck:
+	EMULATE_IRET
 	RESTORE_REGS
 	addl $4, %esp
 1:	iret
@@ -304,8 +327,9 @@
 	testb $_TIF_NEED_RESCHED, %cl
 	jz work_notifysig
 work_resched:
+	HW_STI
 	call schedule
-	cli				# make sure we don't miss an interrupt
+	CLI				# make sure we don't miss an interrupt
 					# setting need_resched or sigpending
 					# between sampling and the iret
 	movl TI_flags(%ebp), %ecx
@@ -357,7 +381,7 @@
 syscall_exit_work:
 	testb $(_TIF_SYSCALL_TRACE|_TIF_SYSCALL_AUDIT|_TIF_SINGLESTEP), %cl
 	jz work_pending
-	sti				# could let do_syscall_trace() call
+	STI				# could let do_syscall_trace() call
 					# schedule() instead
 	movl %esp, %eax
 	movl $1, %edx
diff -NaurbB linux-2.6.17.4/arch/i386/kernel/i386_ksyms.c linux-2.6.17.4-xm/arch/i386/kernel/i386_ksyms.c
--- linux-2.6.17.4/arch/i386/kernel/i386_ksyms.c	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/arch/i386/kernel/i386_ksyms.c	2006-07-27 21:49:42.000000000 +0200
@@ -29,3 +29,9 @@
 #endif
 
 EXPORT_SYMBOL(csum_partial);
+
+
+#ifdef CONFIG_XTRATUM
+#include <asm/xtratum.h>
+EXPORT_SYMBOL(XM_root_func);
+#endif
diff -NaurbB linux-2.6.17.4/arch/i386/kernel/i8259.c linux-2.6.17.4-xm/arch/i386/kernel/i8259.c
--- linux-2.6.17.4/arch/i386/kernel/i8259.c	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/arch/i386/kernel/i8259.c	2006-07-27 21:49:42.000000000 +0200
@@ -26,6 +26,19 @@
 
 #include <io_ports.h>
 
+#ifdef CONFIG_XTRATUM
+#include <asm/xtratum.h>
+
+#undef spin_lock_irqsave
+#define spin_lock_irqsave(lock, flags) \
+  do { hw_save_flags(&flags); hw_cli(); spin_lock(lock); } while (0)
+
+#undef spin_unlock_irqrestore
+#define spin_unlock_irqrestore(lock, flags) \
+  do { spin_unlock(lock); hw_restore_flags(flags); } while (0)
+
+#endif
+
 /*
  * This is the 'legacy' 8259A Programmable Interrupt Controller,
  * present in the majority of PC/AT boxes.
@@ -188,6 +201,16 @@
 	 */
 	if (cached_irq_mask & irqmask)
 		goto spurious_8259A_irq;
+#ifdef CONFIG_XTRATUM
+       if (irq == 0) {
+           /* Fast timer ack -- don't mask (unless supposedly
+             spurious) */
+           outb(0x20,PIC_MASTER_CMD);
+           spin_unlock_irqrestore(&i8259A_lock, flags);
+           return;
+       }
+#endif /* CONFIG_XTRATUM */
+
 	cached_irq_mask |= irqmask;
 
 handle_real_irq:
diff -NaurbB linux-2.6.17.4/arch/i386/kernel/Makefile linux-2.6.17.4-xm/arch/i386/kernel/Makefile
--- linux-2.6.17.4/arch/i386/kernel/Makefile	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/arch/i386/kernel/Makefile	2006-07-27 21:49:42.000000000 +0200
@@ -12,6 +12,7 @@
 obj-y				+= cpu/
 obj-y				+= timers/
 obj-y				+= acpi/
+obj-$(CONFIG_XTRATUM)           += xtratum.o
 obj-$(CONFIG_X86_BIOS_REBOOT)	+= reboot.o
 obj-$(CONFIG_MCA)		+= mca.o
 obj-$(CONFIG_X86_MSR)		+= msr.o
diff -NaurbB linux-2.6.17.4/arch/i386/kernel/xtratum.c linux-2.6.17.4-xm/arch/i386/kernel/xtratum.c
--- linux-2.6.17.4/arch/i386/kernel/xtratum.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.4-xm/arch/i386/kernel/xtratum.c	2006-07-27 21:49:42.000000000 +0200
@@ -0,0 +1,65 @@
+/*
+ * $FILE$
+ *
+ * IRQs related functions
+ *
+ * $VERSION$
+ *
+ * Author: Miguel Masmano <mimastel@doctor.upv.es>
+ *
+ * $LICENSE$
+ */
+
+#include <linux/config.h>
+
+#ifdef CONFIG_XTRATUM
+#include <linux/smp.h>
+#include <linux/irq.h>
+
+#include <asm/xtratum.h>
+
+extern void ret_from_intr (void);
+extern irq_desc_t irq_desc[];
+extern fastcall unsigned int do_IRQ (struct pt_regs *regs);
+
+XM_root_func_t XM_root_func = {
+  __cli: hw_cli,
+  __sti: hw_sti,
+  __is_cli: hw_is_cli,
+  __save_flags: hw_save_flags,
+  __restore_flags: hw_restore_flags,
+  __ret_from_intr: (void *) ret_from_intr,
+  __irq_desc: (void *)irq_desc,
+  __do_IRQ: (void *)do_IRQ,
+  __emulate_iret: (void *)0
+};
+
+void hw_sti (void) {
+  __asm__ __volatile__("sti": : :"memory");
+}
+
+void hw_cli (void) {
+  __asm__ __volatile__("cli": : :"memory");
+}
+
+void hw_save_flags (unsigned long *flags) {
+  __asm__ __volatile__ ("pushfl ; popl %0":"=g" (*flags): /* no input */);  
+}
+
+void hw_restore_flags (unsigned long flags) {
+  __asm__ __volatile__("pushl %0 ; popfl": /* no output */ 
+		       :"g" (flags):"memory", "cc");
+}
+
+void hw_save_flags_and_cli (unsigned long *flags) {
+  hw_save_flags(flags);
+  hw_cli ();
+}
+
+int hw_is_cli (void) {
+  unsigned long flags;
+  hw_save_flags (&flags);
+  return !(flags & X86_EFLAGS_IF);
+}
+
+#endif
diff -NaurbB linux-2.6.17.4/arch/i386/mm/fault.c linux-2.6.17.4-xm/arch/i386/mm/fault.c
--- linux-2.6.17.4/arch/i386/mm/fault.c	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/arch/i386/mm/fault.c	2006-07-27 21:49:43.000000000 +0200
@@ -331,6 +331,10 @@
 		goto bad_area_nosemaphore;
 	}
 
+#ifdef CONFIG_XTRATUM
+	hw_sti();
+#endif
+
 	if (notify_die(DIE_PAGE_FAULT, "page fault", regs, error_code, 14,
 					SIGSEGV) == NOTIFY_STOP)
 		return;
diff -NaurbB linux-2.6.17.4/arch/i386/mm/ioremap.c linux-2.6.17.4-xm/arch/i386/mm/ioremap.c
--- linux-2.6.17.4/arch/i386/mm/ioremap.c	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/arch/i386/mm/ioremap.c	2006-07-27 21:49:43.000000000 +0200
@@ -17,6 +17,7 @@
 #include <asm/cacheflush.h>
 #include <asm/tlbflush.h>
 #include <asm/pgtable.h>
+#include <asm/pgalloc.h>
 
 #define ISA_START_ADDRESS	0xa0000
 #define ISA_END_ADDRESS		0x100000
@@ -92,6 +93,7 @@
 		err = ioremap_pud_range(pgd, addr, next, phys_addr+addr, flags);
 		if (err)
 			break;
+		set_pgdir(addr, *pgd);
 	} while (pgd++, addr = next, addr != end);
 	flush_tlb_all();
 	return err;
diff -NaurbB linux-2.6.17.4/arch/i386/mm/pgtable.c linux-2.6.17.4-xm/arch/i386/mm/pgtable.c
--- linux-2.6.17.4/arch/i386/mm/pgtable.c	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/arch/i386/mm/pgtable.c	2006-07-27 21:49:43.000000000 +0200
@@ -206,6 +206,27 @@
 		set_page_private(next, (unsigned long)pprev);
 }
 
+void set_pgdir(unsigned long address, pgd_t entry)
+{
+       struct task_struct * p;
+       struct page *page;
+       pgd_t *pgd;
+
+       read_lock(&tasklist_lock);
+
+       for_each_process(p) {
+               if(p->mm)
+                   *pgd_offset(p->mm,address) = entry;
+       }
+
+       read_unlock(&tasklist_lock);
+
+       for (page = pgd_list; page; page = (struct page *)page->index) {
+               pgd = (pgd_t *)page_address(page);
+               pgd[address >> PGDIR_SHIFT] = entry;
+       }
+}
+
 void pgd_ctor(void *pgd, kmem_cache_t *cache, unsigned long unused)
 {
 	unsigned long flags;
diff -NaurbB linux-2.6.17.4/include/asm-i386/pgalloc.h linux-2.6.17.4-xm/include/asm-i386/pgalloc.h
--- linux-2.6.17.4/include/asm-i386/pgalloc.h	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/include/asm-i386/pgalloc.h	2006-07-27 21:50:51.000000000 +0200
@@ -47,4 +47,6 @@
 
 #define check_pgt_cache()	do { } while (0)
 
+extern void set_pgdir(unsigned long addr, pgd_t entry);
+
 #endif /* _I386_PGALLOC_H */
diff -NaurbB linux-2.6.17.4/include/asm-i386/system.h linux-2.6.17.4-xm/include/asm-i386/system.h
--- linux-2.6.17.4/include/asm-i386/system.h	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/include/asm-i386/system.h	2006-07-27 21:50:51.000000000 +0200
@@ -457,6 +457,8 @@
 
 #define set_wmb(var, value) do { var = value; wmb(); } while (0)
 
+#ifndef CONFIG_XTRATUM
+
 /* interrupt control.. */
 #define local_save_flags(x)	do { typecheck(unsigned long,x); __asm__ __volatile__("pushfl ; popl %0":"=g" (x): /* no input */); } while (0)
 #define local_irq_restore(x) 	do { typecheck(unsigned long,x); __asm__ __volatile__("pushl %0 ; popfl": /* no output */ :"g" (x):"memory", "cc"); } while (0)
@@ -477,6 +479,34 @@
 /* For spinlocks etc */
 #define local_irq_save(x)	__asm__ __volatile__("pushfl ; popl %0 ; cli":"=g" (x): /* no input */ :"memory")
 
+#else
+
+#include <asm/xtratum.h>
+
+#define local_save_flags(x) XM_root_func.__save_flags(&x)
+#define local_irq_restore(x) XM_root_func.__restore_flags(x)
+#define local_irq_disable() XM_root_func.__cli()
+#define local_irq_enable() XM_root_func.__sti()
+/* used in the idle loop; sti takes one instruction cycle to complete */
+#define safe_halt() \
+  do { \
+    XM_root_func.__sti(); \
+    __asm__ __volatile__("cli; nop; sti; hlt": : :"memory"); \
+  } while (0)
+
+/* used when interrupts are already enabled or to shutdown the processor */
+#define halt() __asm__ __volatile__("hlt": : :"memory")
+#define irqs_disabled() XM_root_func.__is_cli()
+
+/* For spinlocks etc */
+#define local_irq_save(x) \
+ do { \
+   XM_root_func.__save_flags(&x); \
+   XM_root_func.__cli(); \
+ } while (0)
+
+#endif
+
 /*
  * disable hlt during certain critical i/o operations
  */
diff -NaurbB linux-2.6.17.4/include/asm-i386/xtratum.h linux-2.6.17.4-xm/include/asm-i386/xtratum.h
--- linux-2.6.17.4/include/asm-i386/xtratum.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.17.4-xm/include/asm-i386/xtratum.h	2006-07-27 21:50:51.000000000 +0200
@@ -0,0 +1,43 @@
+// XtratuM
+// version: 0.1
+//
+// (c) 2006, 2005, 2004, Miguel Masmano <mimastel@doctor.upv.es>
+// Released under the terms of GPL License v2
+
+#include <linux/config.h>
+
+#ifndef _XM_LINUX_H_
+#define _XM_LINUX_H_
+
+#ifdef CONFIG_XTRATUM
+
+/* 
+ * cli, sti ... can not be executed by the guest OS's what
+ * includes the root OS (Linux)
+ */
+typedef struct XM_root_func_struct {
+  void (*__cli) (void); // Hardcoded (pos + 0)
+  void (*__sti) (void); // Hardcoded (pos + 4)
+  int (*__is_cli) (void); // (pos + 8)
+  void (*__save_flags) (unsigned long *); // (pos + 12)
+  void (*__restore_flags) (unsigned long); // (pos + 16)
+  void *__ret_from_intr; // (pos + 20)
+  void *__irq_desc; // (pos + 24)
+  void *__do_IRQ; // (pos + 28)
+  void *__emulate_iret; // (pos + 32)
+} XM_root_func_t;
+
+extern XM_root_func_t XM_root_func;
+
+extern void hw_sti (void);
+extern void hw_cli (void);
+extern int hw_is_cli (void);
+extern void hw_save_flags (unsigned long *flags);
+extern void hw_save_flags_and_cli (unsigned long *flags);
+extern void hw_restore_flags (unsigned long flags);
+
+extern int xm_init (void);
+
+#endif
+
+#endif
diff -NaurbB linux-2.6.17.4/init/Kconfig linux-2.6.17.4-xm/init/Kconfig
--- linux-2.6.17.4/init/Kconfig	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/init/Kconfig	2006-07-27 21:50:58.000000000 +0200
@@ -56,6 +56,14 @@
 
 menu "General setup"
 
+config XTRATUM
+        bool "Enable XtratuM"
+        default n
+        help
+          This will enable XtratuM, allowing to execute several
+          operating systems (being one of them this Linux Kernel) in
+          the current hardware.
+
 config LOCALVERSION
 	string "Local version - append to kernel release"
 	help
diff -NaurbB linux-2.6.17.4/mm/vmalloc.c linux-2.6.17.4-xm/mm/vmalloc.c
--- linux-2.6.17.4/mm/vmalloc.c	2006-07-06 22:02:28.000000000 +0200
+++ linux-2.6.17.4-xm/mm/vmalloc.c	2006-07-27 21:51:05.000000000 +0200
@@ -19,7 +19,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/tlbflush.h>
-
+#include <asm/pgalloc.h>
 
 DEFINE_RWLOCK(vmlist_lock);
 struct vm_struct *vmlist;
@@ -148,10 +148,16 @@
 	BUG_ON(addr >= end);
 	pgd = pgd_offset_k(addr);
 	do {
+	        pgd_t oldpgd;
+	        memcpy(&oldpgd,pgd,sizeof(pgd_t));
+
 		next = pgd_addr_end(addr, end);
 		err = vmap_pud_range(pgd, addr, next, prot, pages);
 		if (err)
 			break;
+		if (pgd_val(oldpgd) != pgd_val(*pgd))
+		        set_pgdir(addr, *pgd);
+
 	} while (pgd++, addr = next, addr != end);
 	flush_cache_vmap((unsigned long) area->addr, end);
 	return err;
diff -NaurbB linux-2.6.17.4/Makefile linux-2.6.17.4-xm/Makefile
--- linux-2.6.17.4/Makefile	2006-11-21 12:08:37.000000000 +0100
+++ linux-2.6.17.4-xm/Makefile	2006-11-21 11:53:33.000000000 +0100
@@ -1,7 +1,7 @@
 VERSION = 2
 PATCHLEVEL = 6
 SUBLEVEL = 17
-EXTRAVERSION = .4
+EXTRAVERSION = .4-xm.1.0
 NAME=Crazed Snow-Weasel
 
 # *DOCUMENTATION*
